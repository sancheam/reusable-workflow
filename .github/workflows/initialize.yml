
name: Initialization
on:
  workflow_call:
    inputs:
      version_file:
        type: string
        required: false
        default: 'pom.xml'
    outputs:
      git_branch:
        value: ${{ jobs.initialize.outputs.git_branch }}
      git_head_branch:
        value: ${{ jobs.initialize.outputs.git_head_branch }}
      git_sha_short:
        value: ${{ jobs.initialize.outputs.git_sha_short }}
      version:
        value: ${{ jobs.initialize.outputs.version }}
jobs:
  initialize:
    runs-on: [road-runner, small]
    outputs:
      git_branch: ${{ steps.set_git_branch.outputs.git_branch }}
      git_head_branch: ${{ steps.set_git_branch.outputs.git_head_branch }}
      git_sha_short: ${{ steps.set_git_branch.outputs.git_sha_short }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Set git branch
        id: set_git_branch
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          if [[ $TAG == "refs/heads/"* ]]; then
            echo "git_branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
            echo "git_head_branch=$(echo ${GITHUB_HEAD_REF#refs/heads/})" >> $GITHUB_OUTPUT
            echo "git_sha_short=$(echo ${GITHUB_SHA::6})" >> $GITHUB_OUTPUT
          else
            echo "git_branch=$(echo $TAG)" >> $GITHUB_OUTPUT
            echo "git_sha_short=$(echo $TAG)" >> $GITHUB_OUTPUT
          fi
    
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.set_git_branch.outputs.git_branch }}
          fetch-depth: 0
        
      - name: Git Pull
        run: git pull origin ${{ steps.set_git_branch.outputs.git_branch }}

      - name: Install xmlstarlet
        run: |
          sudo apt-get install xmlstarlet

      - name: Get version
        id: get_version
        run: |
          if [[ '${{ inputs.version_file }}' == 'pom.xml' ]]; then
            VERSION=$(xmlstarlet sel -t -m "//_:project" -v _:version pom.xml)
          else
            VERSION=$(jq -r .version package.json)
          fi

          echo "version=$(echo $VERSION)" >> $GITHUB_OUTPUT

      